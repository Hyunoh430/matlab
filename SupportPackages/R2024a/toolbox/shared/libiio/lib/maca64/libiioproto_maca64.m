function [methodinfo,structs,enuminfo,ThunkLibName]=libiioproto_maca64
%LIBIIOPROTO_MACA64 Create structures to define interfaces found in 'mw-iio-wrapper'.

%This function was generated by loadlibrary.m parser version  on Mon Nov 20 09:20:14 2023
%perl options:'mw-iio-wrapper.i -outfile=libiioproto_maca64.m -thunkfile=libiio_thunk_maca64.c -header=mw-iio-wrapper.h iio.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'libiio_thunk_maca64');
% struct iio_scan_context * iio_create_scan_context ( const char * backend , unsigned int flags ); 
fcns.thunkname{fcnNum}='voidPtrcstringuint32Thunk';fcns.name{fcnNum}='iio_create_scan_context'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='iio_scan_contextPtr'; fcns.RHS{fcnNum}={'cstring', 'uint32'};fcnNum=fcnNum+1;
% void iio_scan_context_destroy ( struct iio_scan_context * ctx ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='iio_scan_context_destroy'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'iio_scan_contextPtr'};fcnNum=fcnNum+1;
% ssize_t iio_scan_context_get_info_list ( struct iio_scan_context * ctx , struct iio_context_info *** info ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrThunk';fcns.name{fcnNum}='iio_scan_context_get_info_list'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'iio_scan_contextPtr', 'iio_context_infoPtrPtrPtr'};fcnNum=fcnNum+1;
% void iio_context_info_list_free ( struct iio_context_info ** info ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='iio_context_info_list_free'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'iio_context_infoPtrPtr'};fcnNum=fcnNum+1;
% const char * iio_context_info_get_description ( const struct iio_context_info * info ); 
fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='iio_context_info_get_description'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'iio_context_infoPtr'};fcnNum=fcnNum+1;
% const char * iio_context_info_get_uri ( const struct iio_context_info * info ); 
fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='iio_context_info_get_uri'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'iio_context_infoPtr'};fcnNum=fcnNum+1;
% struct iio_scan_block * iio_create_scan_block ( const char * backend , unsigned int flags ); 
fcns.thunkname{fcnNum}='voidPtrcstringuint32Thunk';fcns.name{fcnNum}='iio_create_scan_block'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='iio_scan_blockPtr'; fcns.RHS{fcnNum}={'cstring', 'uint32'};fcnNum=fcnNum+1;
% void iio_scan_block_destroy ( struct iio_scan_block * blk ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='iio_scan_block_destroy'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'iio_scan_blockPtr'};fcnNum=fcnNum+1;
% ssize_t iio_scan_block_scan ( struct iio_scan_block * blk ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='iio_scan_block_scan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'iio_scan_blockPtr'};fcnNum=fcnNum+1;
% struct iio_context_info * iio_scan_block_get_info ( struct iio_scan_block * blk , unsigned int index ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='iio_scan_block_get_info'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='iio_context_infoPtr'; fcns.RHS{fcnNum}={'iio_scan_blockPtr', 'uint32'};fcnNum=fcnNum+1;
% void iio_library_get_version ( unsigned int * major , unsigned int * minor , char git_tag [ 8 ]); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='iio_library_get_version'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint32Ptr', 'uint32Ptr', 'int8Ptr'};fcnNum=fcnNum+1;
% void iio_strerror ( int err , char * dst , size_t len ); 
fcns.thunkname{fcnNum}='voidint32cstringulongThunk';fcns.name{fcnNum}='iio_strerror'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% _Bool iio_has_backend ( const char * backend ); 
fcns.thunkname{fcnNum}='_BoolcstringThunk';fcns.name{fcnNum}='iio_has_backend'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='bool'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% unsigned int iio_get_backends_count ( void ); 
fcns.thunkname{fcnNum}='uint32voidThunk';fcns.name{fcnNum}='iio_get_backends_count'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% const char * iio_get_backend ( unsigned int index ); 
fcns.thunkname{fcnNum}='cstringuint32Thunk';fcns.name{fcnNum}='iio_get_backend'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% struct iio_context * iio_create_default_context ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='iio_create_default_context'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='iio_contextPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% struct iio_context * iio_create_local_context ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='iio_create_local_context'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='iio_contextPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% struct iio_context * iio_create_xml_context ( const char * xml_file ); 
fcns.thunkname{fcnNum}='voidPtrcstringThunk';fcns.name{fcnNum}='iio_create_xml_context'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='iio_contextPtr'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% struct iio_context * iio_create_xml_context_mem ( const char * xml , size_t len ); 
fcns.thunkname{fcnNum}='voidPtrcstringulongThunk';fcns.name{fcnNum}='iio_create_xml_context_mem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='iio_contextPtr'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% struct iio_context * iio_create_network_context ( const char * host ); 
fcns.thunkname{fcnNum}='voidPtrcstringThunk';fcns.name{fcnNum}='iio_create_network_context'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='iio_contextPtr'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% struct iio_context * iio_create_context_from_uri ( const char * uri ); 
fcns.thunkname{fcnNum}='voidPtrcstringThunk';fcns.name{fcnNum}='iio_create_context_from_uri'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='iio_contextPtr'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% struct iio_context * iio_context_clone ( const struct iio_context * ctx ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='iio_context_clone'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='iio_contextPtr'; fcns.RHS{fcnNum}={'iio_contextPtr'};fcnNum=fcnNum+1;
% void iio_context_destroy ( struct iio_context * ctx ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='iio_context_destroy'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'iio_contextPtr'};fcnNum=fcnNum+1;
% int iio_context_get_version ( const struct iio_context * ctx , unsigned int * major , unsigned int * minor , char git_tag [ 8 ]); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='iio_context_get_version'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_contextPtr', 'uint32Ptr', 'uint32Ptr', 'int8Ptr'};fcnNum=fcnNum+1;
% const char * iio_context_get_xml ( const struct iio_context * ctx ); 
fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='iio_context_get_xml'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'iio_contextPtr'};fcnNum=fcnNum+1;
% const char * iio_context_get_name ( const struct iio_context * ctx ); 
fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='iio_context_get_name'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'iio_contextPtr'};fcnNum=fcnNum+1;
% const char * iio_context_get_description ( const struct iio_context * ctx ); 
fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='iio_context_get_description'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'iio_contextPtr'};fcnNum=fcnNum+1;
% unsigned int iio_context_get_attrs_count ( const struct iio_context * ctx ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='iio_context_get_attrs_count'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'iio_contextPtr'};fcnNum=fcnNum+1;
% int iio_context_get_attr ( const struct iio_context * ctx , unsigned int index , const char ** name , const char ** value ); 
fcns.thunkname{fcnNum}='int32voidPtruint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='iio_context_get_attr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_contextPtr', 'uint32', 'stringPtrPtr', 'stringPtrPtr'};fcnNum=fcnNum+1;
% const char * iio_context_get_attr_value ( const struct iio_context * ctx , const char * name ); 
fcns.thunkname{fcnNum}='cstringvoidPtrcstringThunk';fcns.name{fcnNum}='iio_context_get_attr_value'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'iio_contextPtr', 'cstring'};fcnNum=fcnNum+1;
% unsigned int iio_context_get_devices_count ( const struct iio_context * ctx ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='iio_context_get_devices_count'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'iio_contextPtr'};fcnNum=fcnNum+1;
% struct iio_device * iio_context_get_device ( const struct iio_context * ctx , unsigned int index ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='iio_context_get_device'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='iio_devicePtr'; fcns.RHS{fcnNum}={'iio_contextPtr', 'uint32'};fcnNum=fcnNum+1;
% struct iio_device * iio_context_find_device ( const struct iio_context * ctx , const char * name ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrcstringThunk';fcns.name{fcnNum}='iio_context_find_device'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='iio_devicePtr'; fcns.RHS{fcnNum}={'iio_contextPtr', 'cstring'};fcnNum=fcnNum+1;
% int iio_context_set_timeout ( struct iio_context * ctx , unsigned int timeout_ms ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='iio_context_set_timeout'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_contextPtr', 'uint32'};fcnNum=fcnNum+1;
% const struct iio_context * iio_device_get_context ( const struct iio_device * dev ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='iio_device_get_context'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='iio_contextPtr'; fcns.RHS{fcnNum}={'iio_devicePtr'};fcnNum=fcnNum+1;
% const char * iio_device_get_id ( const struct iio_device * dev ); 
fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='iio_device_get_id'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'iio_devicePtr'};fcnNum=fcnNum+1;
% const char * iio_device_get_name ( const struct iio_device * dev ); 
fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='iio_device_get_name'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'iio_devicePtr'};fcnNum=fcnNum+1;
% const char * iio_device_get_label ( const struct iio_device * dev ); 
fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='iio_device_get_label'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'iio_devicePtr'};fcnNum=fcnNum+1;
% unsigned int iio_device_get_channels_count ( const struct iio_device * dev ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='iio_device_get_channels_count'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'iio_devicePtr'};fcnNum=fcnNum+1;
% unsigned int iio_device_get_attrs_count ( const struct iio_device * dev ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='iio_device_get_attrs_count'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'iio_devicePtr'};fcnNum=fcnNum+1;
% unsigned int iio_device_get_buffer_attrs_count ( const struct iio_device * dev ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='iio_device_get_buffer_attrs_count'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'iio_devicePtr'};fcnNum=fcnNum+1;
% struct iio_channel * iio_device_get_channel ( const struct iio_device * dev , unsigned int index ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='iio_device_get_channel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='iio_channelPtr'; fcns.RHS{fcnNum}={'iio_devicePtr', 'uint32'};fcnNum=fcnNum+1;
% const char * iio_device_get_attr ( const struct iio_device * dev , unsigned int index ); 
fcns.thunkname{fcnNum}='cstringvoidPtruint32Thunk';fcns.name{fcnNum}='iio_device_get_attr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'iio_devicePtr', 'uint32'};fcnNum=fcnNum+1;
% const char * iio_device_get_buffer_attr ( const struct iio_device * dev , unsigned int index ); 
fcns.thunkname{fcnNum}='cstringvoidPtruint32Thunk';fcns.name{fcnNum}='iio_device_get_buffer_attr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'iio_devicePtr', 'uint32'};fcnNum=fcnNum+1;
% struct iio_channel * iio_device_find_channel ( const struct iio_device * dev , const char * name , _Bool output ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrcstring_BoolThunk';fcns.name{fcnNum}='iio_device_find_channel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='iio_channelPtr'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'bool'};fcnNum=fcnNum+1;
% const char * iio_device_find_attr ( const struct iio_device * dev , const char * name ); 
fcns.thunkname{fcnNum}='cstringvoidPtrcstringThunk';fcns.name{fcnNum}='iio_device_find_attr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring'};fcnNum=fcnNum+1;
% const char * iio_device_find_buffer_attr ( const struct iio_device * dev , const char * name ); 
fcns.thunkname{fcnNum}='cstringvoidPtrcstringThunk';fcns.name{fcnNum}='iio_device_find_buffer_attr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring'};fcnNum=fcnNum+1;
% ssize_t iio_device_attr_read ( const struct iio_device * dev , const char * attr , char * dst , size_t len ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringcstringulongThunk';fcns.name{fcnNum}='iio_device_attr_read'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int iio_device_attr_read_bool ( const struct iio_device * dev , const char * attr , _Bool * val ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='iio_device_attr_read_bool'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'boolPtr'};fcnNum=fcnNum+1;
% int iio_device_attr_read_longlong ( const struct iio_device * dev , const char * attr , long long * val ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='iio_device_attr_read_longlong'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'int64Ptr'};fcnNum=fcnNum+1;
% int iio_device_attr_read_double ( const struct iio_device * dev , const char * attr , double * val ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='iio_device_attr_read_double'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% ssize_t iio_device_attr_write ( const struct iio_device * dev , const char * attr , const char * src ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringcstringThunk';fcns.name{fcnNum}='iio_device_attr_write'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% ssize_t iio_device_attr_write_raw ( const struct iio_device * dev , const char * attr , const void * src , size_t len ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringvoidPtrulongThunk';fcns.name{fcnNum}='iio_device_attr_write_raw'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% int iio_device_attr_write_bool ( const struct iio_device * dev , const char * attr , _Bool val ); 
fcns.thunkname{fcnNum}='int32voidPtrcstring_BoolThunk';fcns.name{fcnNum}='iio_device_attr_write_bool'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'bool'};fcnNum=fcnNum+1;
% int iio_device_attr_write_longlong ( const struct iio_device * dev , const char * attr , long long val ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringint64Thunk';fcns.name{fcnNum}='iio_device_attr_write_longlong'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'int64'};fcnNum=fcnNum+1;
% int iio_device_attr_write_double ( const struct iio_device * dev , const char * attr , double val ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringdoubleThunk';fcns.name{fcnNum}='iio_device_attr_write_double'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'double'};fcnNum=fcnNum+1;
% ssize_t iio_device_buffer_attr_read ( const struct iio_device * dev , const char * attr , char * dst , size_t len ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringcstringulongThunk';fcns.name{fcnNum}='iio_device_buffer_attr_read'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int iio_device_buffer_attr_read_bool ( const struct iio_device * dev , const char * attr , _Bool * val ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='iio_device_buffer_attr_read_bool'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'boolPtr'};fcnNum=fcnNum+1;
% int iio_device_buffer_attr_read_longlong ( const struct iio_device * dev , const char * attr , long long * val ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='iio_device_buffer_attr_read_longlong'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'int64Ptr'};fcnNum=fcnNum+1;
% int iio_device_buffer_attr_read_double ( const struct iio_device * dev , const char * attr , double * val ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='iio_device_buffer_attr_read_double'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% ssize_t iio_device_buffer_attr_write ( const struct iio_device * dev , const char * attr , const char * src ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringcstringThunk';fcns.name{fcnNum}='iio_device_buffer_attr_write'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% ssize_t iio_device_buffer_attr_write_raw ( const struct iio_device * dev , const char * attr , const void * src , size_t len ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringvoidPtrulongThunk';fcns.name{fcnNum}='iio_device_buffer_attr_write_raw'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% int iio_device_buffer_attr_write_bool ( const struct iio_device * dev , const char * attr , _Bool val ); 
fcns.thunkname{fcnNum}='int32voidPtrcstring_BoolThunk';fcns.name{fcnNum}='iio_device_buffer_attr_write_bool'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'bool'};fcnNum=fcnNum+1;
% int iio_device_buffer_attr_write_longlong ( const struct iio_device * dev , const char * attr , long long val ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringint64Thunk';fcns.name{fcnNum}='iio_device_buffer_attr_write_longlong'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'int64'};fcnNum=fcnNum+1;
% int iio_device_buffer_attr_write_double ( const struct iio_device * dev , const char * attr , double val ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringdoubleThunk';fcns.name{fcnNum}='iio_device_buffer_attr_write_double'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'double'};fcnNum=fcnNum+1;
% void iio_device_set_data ( struct iio_device * dev , void * data ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='iio_device_set_data'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'iio_devicePtr', 'voidPtr'};fcnNum=fcnNum+1;
% void * iio_device_get_data ( const struct iio_device * dev ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='iio_device_get_data'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'iio_devicePtr'};fcnNum=fcnNum+1;
% int iio_device_get_trigger ( const struct iio_device * dev , const struct iio_device ** trigger ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='iio_device_get_trigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_devicePtr', 'iio_devicePtrPtr'};fcnNum=fcnNum+1;
% int iio_device_set_trigger ( const struct iio_device * dev , const struct iio_device * trigger ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='iio_device_set_trigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_devicePtr', 'iio_devicePtr'};fcnNum=fcnNum+1;
% _Bool iio_device_is_trigger ( const struct iio_device * dev ); 
fcns.thunkname{fcnNum}='_BoolvoidPtrThunk';fcns.name{fcnNum}='iio_device_is_trigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='bool'; fcns.RHS{fcnNum}={'iio_devicePtr'};fcnNum=fcnNum+1;
% int iio_device_set_kernel_buffers_count ( const struct iio_device * dev , unsigned int nb_buffers ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='iio_device_set_kernel_buffers_count'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_devicePtr', 'uint32'};fcnNum=fcnNum+1;
% const struct iio_device * iio_channel_get_device ( const struct iio_channel * chn ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='iio_channel_get_device'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='iio_devicePtr'; fcns.RHS{fcnNum}={'iio_channelPtr'};fcnNum=fcnNum+1;
% const char * iio_channel_get_id ( const struct iio_channel * chn ); 
fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='iio_channel_get_id'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'iio_channelPtr'};fcnNum=fcnNum+1;
% const char * iio_channel_get_name ( const struct iio_channel * chn ); 
fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='iio_channel_get_name'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'iio_channelPtr'};fcnNum=fcnNum+1;
% _Bool iio_channel_is_output ( const struct iio_channel * chn ); 
fcns.thunkname{fcnNum}='_BoolvoidPtrThunk';fcns.name{fcnNum}='iio_channel_is_output'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='bool'; fcns.RHS{fcnNum}={'iio_channelPtr'};fcnNum=fcnNum+1;
% _Bool iio_channel_is_scan_element ( const struct iio_channel * chn ); 
fcns.thunkname{fcnNum}='_BoolvoidPtrThunk';fcns.name{fcnNum}='iio_channel_is_scan_element'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='bool'; fcns.RHS{fcnNum}={'iio_channelPtr'};fcnNum=fcnNum+1;
% unsigned int iio_channel_get_attrs_count ( const struct iio_channel * chn ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='iio_channel_get_attrs_count'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'iio_channelPtr'};fcnNum=fcnNum+1;
% const char * iio_channel_get_attr ( const struct iio_channel * chn , unsigned int index ); 
fcns.thunkname{fcnNum}='cstringvoidPtruint32Thunk';fcns.name{fcnNum}='iio_channel_get_attr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'iio_channelPtr', 'uint32'};fcnNum=fcnNum+1;
% const char * iio_channel_find_attr ( const struct iio_channel * chn , const char * name ); 
fcns.thunkname{fcnNum}='cstringvoidPtrcstringThunk';fcns.name{fcnNum}='iio_channel_find_attr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'iio_channelPtr', 'cstring'};fcnNum=fcnNum+1;
% const char * iio_channel_attr_get_filename ( const struct iio_channel * chn , const char * attr ); 
fcns.thunkname{fcnNum}='cstringvoidPtrcstringThunk';fcns.name{fcnNum}='iio_channel_attr_get_filename'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'iio_channelPtr', 'cstring'};fcnNum=fcnNum+1;
% ssize_t iio_channel_attr_read ( const struct iio_channel * chn , const char * attr , char * dst , size_t len ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringcstringulongThunk';fcns.name{fcnNum}='iio_channel_attr_read'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'iio_channelPtr', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int iio_channel_attr_read_bool ( const struct iio_channel * chn , const char * attr , _Bool * val ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='iio_channel_attr_read_bool'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_channelPtr', 'cstring', 'boolPtr'};fcnNum=fcnNum+1;
% int iio_channel_attr_read_longlong ( const struct iio_channel * chn , const char * attr , long long * val ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='iio_channel_attr_read_longlong'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_channelPtr', 'cstring', 'int64Ptr'};fcnNum=fcnNum+1;
% int iio_channel_attr_read_double ( const struct iio_channel * chn , const char * attr , double * val ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='iio_channel_attr_read_double'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_channelPtr', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% ssize_t iio_channel_attr_write ( const struct iio_channel * chn , const char * attr , const char * src ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringcstringThunk';fcns.name{fcnNum}='iio_channel_attr_write'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'iio_channelPtr', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% ssize_t iio_channel_attr_write_raw ( const struct iio_channel * chn , const char * attr , const void * src , size_t len ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringvoidPtrulongThunk';fcns.name{fcnNum}='iio_channel_attr_write_raw'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'iio_channelPtr', 'cstring', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% int iio_channel_attr_write_bool ( const struct iio_channel * chn , const char * attr , _Bool val ); 
fcns.thunkname{fcnNum}='int32voidPtrcstring_BoolThunk';fcns.name{fcnNum}='iio_channel_attr_write_bool'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_channelPtr', 'cstring', 'bool'};fcnNum=fcnNum+1;
% int iio_channel_attr_write_longlong ( const struct iio_channel * chn , const char * attr , long long val ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringint64Thunk';fcns.name{fcnNum}='iio_channel_attr_write_longlong'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_channelPtr', 'cstring', 'int64'};fcnNum=fcnNum+1;
% int iio_channel_attr_write_double ( const struct iio_channel * chn , const char * attr , double val ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringdoubleThunk';fcns.name{fcnNum}='iio_channel_attr_write_double'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_channelPtr', 'cstring', 'double'};fcnNum=fcnNum+1;
% void iio_channel_enable ( struct iio_channel * chn ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='iio_channel_enable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'iio_channelPtr'};fcnNum=fcnNum+1;
% void iio_channel_disable ( struct iio_channel * chn ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='iio_channel_disable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'iio_channelPtr'};fcnNum=fcnNum+1;
% _Bool iio_channel_is_enabled ( const struct iio_channel * chn ); 
fcns.thunkname{fcnNum}='_BoolvoidPtrThunk';fcns.name{fcnNum}='iio_channel_is_enabled'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='bool'; fcns.RHS{fcnNum}={'iio_channelPtr'};fcnNum=fcnNum+1;
% size_t iio_channel_read_raw ( const struct iio_channel * chn , struct iio_buffer * buffer , void * dst , size_t len ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='iio_channel_read_raw'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'iio_channelPtr', 'iio_bufferPtr', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% size_t iio_channel_read ( const struct iio_channel * chn , struct iio_buffer * buffer , void * dst , size_t len ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='iio_channel_read'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'iio_channelPtr', 'iio_bufferPtr', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% size_t iio_channel_write_raw ( const struct iio_channel * chn , struct iio_buffer * buffer , const void * src , size_t len ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='iio_channel_write_raw'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'iio_channelPtr', 'iio_bufferPtr', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% size_t iio_channel_write ( const struct iio_channel * chn , struct iio_buffer * buffer , const void * src , size_t len ); 
fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='iio_channel_write'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'iio_channelPtr', 'iio_bufferPtr', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% void iio_channel_set_data ( struct iio_channel * chn , void * data ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='iio_channel_set_data'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'iio_channelPtr', 'voidPtr'};fcnNum=fcnNum+1;
% void * iio_channel_get_data ( const struct iio_channel * chn ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='iio_channel_get_data'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'iio_channelPtr'};fcnNum=fcnNum+1;
% enum iio_chan_type iio_channel_get_type ( const struct iio_channel * chn ); 
fcns.thunkname{fcnNum}='enumiio_chan_typevoidPtrThunk';fcns.name{fcnNum}='iio_channel_get_type'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='iio_chan_type'; fcns.RHS{fcnNum}={'iio_channelPtr'};fcnNum=fcnNum+1;
% enum iio_modifier iio_channel_get_modifier ( const struct iio_channel * chn ); 
fcns.thunkname{fcnNum}='enumiio_modifiervoidPtrThunk';fcns.name{fcnNum}='iio_channel_get_modifier'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='iio_modifier'; fcns.RHS{fcnNum}={'iio_channelPtr'};fcnNum=fcnNum+1;
% const struct iio_device * iio_buffer_get_device ( const struct iio_buffer * buf ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='iio_buffer_get_device'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='iio_devicePtr'; fcns.RHS{fcnNum}={'iio_bufferPtr'};fcnNum=fcnNum+1;
% struct iio_buffer * iio_device_create_buffer ( const struct iio_device * dev , size_t samples_count , _Bool cyclic ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrulong_BoolThunk';fcns.name{fcnNum}='iio_device_create_buffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='iio_bufferPtr'; fcns.RHS{fcnNum}={'iio_devicePtr', 'ulong', 'bool'};fcnNum=fcnNum+1;
% void iio_buffer_destroy ( struct iio_buffer * buf ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='iio_buffer_destroy'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'iio_bufferPtr'};fcnNum=fcnNum+1;
% int iio_buffer_get_poll_fd ( struct iio_buffer * buf ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='iio_buffer_get_poll_fd'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_bufferPtr'};fcnNum=fcnNum+1;
% int iio_buffer_set_blocking_mode ( struct iio_buffer * buf , _Bool blocking ); 
fcns.thunkname{fcnNum}='int32voidPtr_BoolThunk';fcns.name{fcnNum}='iio_buffer_set_blocking_mode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_bufferPtr', 'bool'};fcnNum=fcnNum+1;
% ssize_t iio_buffer_refill ( struct iio_buffer * buf ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='iio_buffer_refill'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'iio_bufferPtr'};fcnNum=fcnNum+1;
% ssize_t iio_buffer_push ( struct iio_buffer * buf ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='iio_buffer_push'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'iio_bufferPtr'};fcnNum=fcnNum+1;
% ssize_t iio_buffer_push_partial ( struct iio_buffer * buf , size_t samples_count ); 
fcns.thunkname{fcnNum}='longvoidPtrulongThunk';fcns.name{fcnNum}='iio_buffer_push_partial'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'iio_bufferPtr', 'ulong'};fcnNum=fcnNum+1;
% void iio_buffer_cancel ( struct iio_buffer * buf ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='iio_buffer_cancel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'iio_bufferPtr'};fcnNum=fcnNum+1;
% void * iio_buffer_start ( const struct iio_buffer * buf ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='iio_buffer_start'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'iio_bufferPtr'};fcnNum=fcnNum+1;
% void * iio_buffer_first ( const struct iio_buffer * buf , const struct iio_channel * chn ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='iio_buffer_first'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'iio_bufferPtr', 'iio_channelPtr'};fcnNum=fcnNum+1;
% ptrdiff_t iio_buffer_step ( const struct iio_buffer * buf ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='iio_buffer_step'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'iio_bufferPtr'};fcnNum=fcnNum+1;
% void * iio_buffer_end ( const struct iio_buffer * buf ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='iio_buffer_end'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'iio_bufferPtr'};fcnNum=fcnNum+1;
% void iio_buffer_set_data ( struct iio_buffer * buf , void * data ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='iio_buffer_set_data'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'iio_bufferPtr', 'voidPtr'};fcnNum=fcnNum+1;
% void * iio_buffer_get_data ( const struct iio_buffer * buf ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='iio_buffer_get_data'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'iio_bufferPtr'};fcnNum=fcnNum+1;
% ssize_t iio_device_get_sample_size ( const struct iio_device * dev ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='iio_device_get_sample_size'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'iio_devicePtr'};fcnNum=fcnNum+1;
% long iio_channel_get_index ( const struct iio_channel * chn ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='iio_channel_get_index'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'iio_channelPtr'};fcnNum=fcnNum+1;
% const struct iio_data_format * iio_channel_get_data_format ( const struct iio_channel * chn ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='iio_channel_get_data_format'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='iio_data_formatPtr'; fcns.RHS{fcnNum}={'iio_channelPtr'};fcnNum=fcnNum+1;
% void iio_channel_convert ( const struct iio_channel * chn , void * dst , const void * src ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='iio_channel_convert'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'iio_channelPtr', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% void iio_channel_convert_inverse ( const struct iio_channel * chn , void * dst , const void * src ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='iio_channel_convert_inverse'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'iio_channelPtr', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% unsigned int iio_device_get_debug_attrs_count ( const struct iio_device * dev ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='iio_device_get_debug_attrs_count'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'iio_devicePtr'};fcnNum=fcnNum+1;
% const char * iio_device_get_debug_attr ( const struct iio_device * dev , unsigned int index ); 
fcns.thunkname{fcnNum}='cstringvoidPtruint32Thunk';fcns.name{fcnNum}='iio_device_get_debug_attr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'iio_devicePtr', 'uint32'};fcnNum=fcnNum+1;
% const char * iio_device_find_debug_attr ( const struct iio_device * dev , const char * name ); 
fcns.thunkname{fcnNum}='cstringvoidPtrcstringThunk';fcns.name{fcnNum}='iio_device_find_debug_attr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring'};fcnNum=fcnNum+1;
% ssize_t iio_device_debug_attr_read ( const struct iio_device * dev , const char * attr , char * dst , size_t len ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringcstringulongThunk';fcns.name{fcnNum}='iio_device_debug_attr_read'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% ssize_t iio_device_debug_attr_write ( const struct iio_device * dev , const char * attr , const char * src ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringcstringThunk';fcns.name{fcnNum}='iio_device_debug_attr_write'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% ssize_t iio_device_debug_attr_write_raw ( const struct iio_device * dev , const char * attr , const void * src , size_t len ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringvoidPtrulongThunk';fcns.name{fcnNum}='iio_device_debug_attr_write_raw'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% int iio_device_debug_attr_read_bool ( const struct iio_device * dev , const char * attr , _Bool * val ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='iio_device_debug_attr_read_bool'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'boolPtr'};fcnNum=fcnNum+1;
% int iio_device_debug_attr_read_longlong ( const struct iio_device * dev , const char * attr , long long * val ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='iio_device_debug_attr_read_longlong'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'int64Ptr'};fcnNum=fcnNum+1;
% int iio_device_debug_attr_read_double ( const struct iio_device * dev , const char * attr , double * val ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='iio_device_debug_attr_read_double'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int iio_device_debug_attr_write_bool ( const struct iio_device * dev , const char * attr , _Bool val ); 
fcns.thunkname{fcnNum}='int32voidPtrcstring_BoolThunk';fcns.name{fcnNum}='iio_device_debug_attr_write_bool'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'bool'};fcnNum=fcnNum+1;
% int iio_device_debug_attr_write_longlong ( const struct iio_device * dev , const char * attr , long long val ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringint64Thunk';fcns.name{fcnNum}='iio_device_debug_attr_write_longlong'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'int64'};fcnNum=fcnNum+1;
% int iio_device_debug_attr_write_double ( const struct iio_device * dev , const char * attr , double val ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringdoubleThunk';fcns.name{fcnNum}='iio_device_debug_attr_write_double'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'double'};fcnNum=fcnNum+1;
% int iio_device_identify_filename ( const struct iio_device * dev , const char * filename , struct iio_channel ** chn , const char ** attr ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='iio_device_identify_filename'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_devicePtr', 'cstring', 'iio_channelPtrPtr', 'stringPtrPtr'};fcnNum=fcnNum+1;
% int iio_device_reg_write ( struct iio_device * dev , uint32_t address , uint32_t value ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32Thunk';fcns.name{fcnNum}='iio_device_reg_write'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_devicePtr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% int iio_device_reg_read ( struct iio_device * dev , uint32_t address , uint32_t * value ); 
fcns.thunkname{fcnNum}='int32voidPtruint32voidPtrThunk';fcns.name{fcnNum}='iio_device_reg_read'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'iio_devicePtr', 'uint32', 'uint32Ptr'};fcnNum=fcnNum+1;
structs.iio_context.members=struct('');
structs.iio_device.members=struct('');
structs.iio_channel.members=struct('');
structs.iio_buffer.members=struct('');
structs.iio_context_info.members=struct('');
structs.iio_scan_context.members=struct('');
structs.iio_scan_block.members=struct('');
structs.iio_data_format.members=struct('length', 'uint32', 'bits', 'uint32', 'shift', 'uint32', 'is_signed', 'bool', 'is_fully_defined', 'bool', 'is_be', 'bool', 'with_scale', 'bool', 'scale', 'double', 'repeat', 'uint32');
enuminfo.iio_event_direction=struct('IIO_EV_DIR_EITHER',0,'IIO_EV_DIR_RISING',1,'IIO_EV_DIR_FALLING',2,'IIO_EV_DIR_NONE',3,'IIO_EV_DIR_SINGLETAP',4,'IIO_EV_DIR_DOUBLETAP',5);
enuminfo.hwmon_chan_type=struct('HWMON_VOLTAGE',0,'HWMON_FAN',1,'HWMON_PWM',2,'HWMON_TEMP',3,'HWMON_CURRENT',4,'HWMON_POWER',5,'HWMON_ENERGY',6,'HWMON_HUMIDITY',7,'HWMON_INTRUSION',8,'HWMON_CHAN_TYPE_UNKNOWN',2147483647);
enuminfo.iio_chan_type=struct('IIO_VOLTAGE',0,'IIO_CURRENT',1,'IIO_POWER',2,'IIO_ACCEL',3,'IIO_ANGL_VEL',4,'IIO_MAGN',5,'IIO_LIGHT',6,'IIO_INTENSITY',7,'IIO_PROXIMITY',8,'IIO_TEMP',9,'IIO_INCLI',10,'IIO_ROT',11,'IIO_ANGL',12,'IIO_TIMESTAMP',13,'IIO_CAPACITANCE',14,'IIO_ALTVOLTAGE',15,'IIO_CCT',16,'IIO_PRESSURE',17,'IIO_HUMIDITYRELATIVE',18,'IIO_ACTIVITY',19,'IIO_STEPS',20,'IIO_ENERGY',21,'IIO_DISTANCE',22,'IIO_VELOCITY',23,'IIO_CONCENTRATION',24,'IIO_RESISTANCE',25,'IIO_PH',26,'IIO_UVINDEX',27,'IIO_ELECTRICALCONDUCTIVITY',28,'IIO_COUNT',29,'IIO_INDEX',30,'IIO_GRAVITY',31,'IIO_POSITIONRELATIVE',32,'IIO_PHASE',33,'IIO_MASSCONCENTRATION',34,'IIO_CHAN_TYPE_UNKNOWN',2147483647);
enuminfo.iio_modifier=struct('IIO_NO_MOD',0,'IIO_MOD_X',1,'IIO_MOD_Y',2,'IIO_MOD_Z',3,'IIO_MOD_X_AND_Y',4,'IIO_MOD_X_AND_Z',5,'IIO_MOD_Y_AND_Z',6,'IIO_MOD_X_AND_Y_AND_Z',7,'IIO_MOD_X_OR_Y',8,'IIO_MOD_X_OR_Z',9,'IIO_MOD_Y_OR_Z',10,'IIO_MOD_X_OR_Y_OR_Z',11,'IIO_MOD_LIGHT_BOTH',12,'IIO_MOD_LIGHT_IR',13,'IIO_MOD_ROOT_SUM_SQUARED_X_Y',14,'IIO_MOD_SUM_SQUARED_X_Y_Z',15,'IIO_MOD_LIGHT_CLEAR',16,'IIO_MOD_LIGHT_RED',17,'IIO_MOD_LIGHT_GREEN',18,'IIO_MOD_LIGHT_BLUE',19,'IIO_MOD_QUATERNION',20,'IIO_MOD_TEMP_AMBIENT',21,'IIO_MOD_TEMP_OBJECT',22,'IIO_MOD_NORTH_MAGN',23,'IIO_MOD_NORTH_TRUE',24,'IIO_MOD_NORTH_MAGN_TILT_COMP',25,'IIO_MOD_NORTH_TRUE_TILT_COMP',26,'IIO_MOD_RUNNING',27,'IIO_MOD_JOGGING',28,'IIO_MOD_WALKING',29,'IIO_MOD_STILL',30,'IIO_MOD_ROOT_SUM_SQUARED_X_Y_Z',31,'IIO_MOD_I',32,'IIO_MOD_Q',33,'IIO_MOD_CO2',34,'IIO_MOD_VOC',35,'IIO_MOD_LIGHT_UV',36,'IIO_MOD_LIGHT_DUV',37,'IIO_MOD_PM1',38,'IIO_MOD_PM2P5',39,'IIO_MOD_PM4',40,'IIO_MOD_PM10',41,'IIO_MOD_ETHANOL',42,'IIO_MOD_H2',43,'IIO_MOD_O2',44,'IIO_MOD_LINEAR_X',45,'IIO_MOD_LINEAR_Y',46,'IIO_MOD_LINEAR_Z',47,'IIO_MOD_PITCH',48,'IIO_MOD_YAW',49,'IIO_MOD_ROLL',50);
enuminfo.iio_event_type=struct('IIO_EV_TYPE_THRESH',0,'IIO_EV_TYPE_MAG',1,'IIO_EV_TYPE_ROC',2,'IIO_EV_TYPE_THRESH_ADAPTIVE',3,'IIO_EV_TYPE_MAG_ADAPTIVE',4,'IIO_EV_TYPE_CHANGE',5,'IIO_EV_TYPE_MAG_REFERENCED',6,'IIO_EV_TYPE_GESTURE',7);
methodinfo=fcns;